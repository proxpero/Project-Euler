/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

1: 1
3: 1,3
6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

import Foundation

let min = 500

func triangularNumberAtRow(r: Int) -> Int {
    guard r > 0 else { fatalError() }
    return r * (r+1) / 2
}

func factorCount(n: Int) -> Int {
    var count = 0
//    for d in 1...n {
//        if n % d == 0 {
//            print("\(n) % \(d) == 0")
//            count++
//        }
//    }

    let k = sqrt(n)
    for i in 1..<k + 1 {
        if n % i == 0 {
            count+=2
        }
        if k * k == n {
            count -= 1
        }
    }
    
    return count
}

func problem_012() -> Int {
    var n = 1
    while true {
        let t = triangularNumberAtRow(n)
        let count = factorCount(t)
        if count > min  { return t }
        n += 1
    }
}
